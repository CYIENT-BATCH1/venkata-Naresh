#include <xc.h>
#define _XTAL_FREQ  20000000
#define ConfigurationMode_0x80 0x80
#define ListenOnlyMode_0x60  0x60
#define LoopbackMode_0x40 0x40
#define DisableMode_0x20 0x20
#define NormalMode_0x00 0x00
#define CANCON_TransmitBuffer_0 0x08
#define CANCON_TransmitBuffer_1 0x06
#define CANCON_TransmitBuffer_2 0x04
#define TransmitAtHighPriority 0x0B
#define LED_1 RA0
#define LED_2 RA1
#define sw2 PORTBbits.RB0
#define sw3 PORTBbits.RB1

enum Tx_Buffer{Transfer_Buffer_0, Transfer_Buffer_1, Transfer_Buffer_2};  
enum Rx_Buffer{Receiver_Buffer_0, Receiver_Buffer_1};  

char Rx_data_11bytes_Buffer_0[11]={0};
char Rx_data_11bytes_Buffer_1[11]={0};
char Rx_data_11bytes_Buffer_2[11]={0};
char Tx_data_8bytes_Buffer_0[8]= {0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88};
char Tx_data_8bytes_Buffer_1[8]= {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};
char Tx_data_8bytes_Buffer_2[8]= {0x10,0x20,0x30,0x40,0x50,0x60,0x70,0x80};
    
int Sys_Init()
{
    GIE=1;//Global Interrupt Enable
    PEIE=1;//Peripheral Interrupt Enable
    
}
int CANSTAT_Get_Mode(void)           //it give  CAN states in which mode are in 
{
    if((CANSTAT == NormalMode_0x00))  //CAN in Normal Mode
    {
        return 1;
    }
    else if((CANSTAT == DisableMode_0x20))  //CAN in disable Mode
    {
        return 1;
    }
    else if ((CANSTAT == LoopbackMode_0x40))   //CAN in loopback Mode
    {
        return 1;
    }
    else if ((CANSTAT == ListenOnlyMode_0x60))  //CAN in listenonly Mode
    {
        return 1;
    }
    else if ((CANSTAT == ConfigurationMode_0x80)) //CAN in configuration Mode
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
void CANCON_Set_Mode(int mode)
{
    
    switch(mode)
    {
        case 0:
            CANCON = ConfigurationMode_0x80;// CANCON Register set to configure mode
            break;
        case 1:
            CANCON = ListenOnlyMode_0x60; // CANCON Register set to listen mode
            break;
        case 2:
            CANCON = LoopbackMode_0x40;// CANCON Register set to loop back mode
        case 3:
            CANCON = DisableMode_0x20;// CANCON Register set to disable mode
        case 4:
            CANCON = NormalMode_0x00;// CANCON Register set to normal mode
    }
}  
void Can_Init(){
    //  TRISA=0X00;                             //Trisa bits are set to high for LED as an Output
    TRISBbits.RB2=0;                        //Rb2 bit is set for output
    TRISBbits.RB3=1;                        //Rb3 bit is set for input
    //PIE3=0x02;                              //PIE3 register is set to enable Receiver Buffer 1
    //IPR3=0X02;                              //IPR3 register is set to enable 
    PIE3bits.RXB0IE = 1;           /*Enable receiver buffer 0 interrupt*/
    IPR3bits.RXB0IP = 1;           /*Enable receiver buffer 0 as high priority*/
    
    
}
void Set_BaudRate()  // baud rate function
{
    BRGCON1=0xC1;  //BRGCON1 register set to be 0xc1 for 250kbps.
    BRGCON2=0xAE;   //BRGCON2 register set to be 0xAE for 250kbps.
    BRGCON3=0x45;   //BRGCON3 register set to be 0x45 for 250kbps.
    
}
void Set_Filter()    //acceptance filter function
{
    RXF0SIDH=0x00;  // RXF0SIDH register set to 0x00.
    RXF0SIDL=0x00;  // RXF0SIDL register set to 0x00.
    
}
void Set_Mask()     //acceptance mack function
{
    RXM0SIDH=0x00;  //RXM0SIDH register set to 0x00;
    RXM0SIDL=0x00;  //RXM0SIDL register set to 0x00;
    
}

int Tx_Buffer(char Transfer_buffer, char dat_tx0,char dat_tx1,char dat_tx2)
{ 
    //switch(Transfer_buffer)
    
        //case 0:
            CANCON = CANCON_TransmitBuffer_0;
            TXB0SIDH=0xE0;       //passing message ID 700.  
            TXB0SIDL=0x00;
            TXB0DLC = 0x08;       // transfering 8byte of data.
            
            
            TXB0D0 = dat_tx0; // washer output
            TXB0D1 = dat_tx1; //head light washer
            TXB0D2 = 0x00;  
            TXB0D3 = 0x00;
            TXB0D4 = 0x00;
            TXB0D5 = dat_tx2; //warning lamp statues
            TXB0D6 = 0x00;
            TXB0D7 = 0x00;
            //enable the TXBnCON  such that the transmitter buffer and assign the highest priority to the chosen buffer.
            TXB0CON = TransmitAtHighPriority;
}
            
      /*
            CANCON = CANCON_TransmitBuffer_1;
            TXB1SIDL = 0x00 ;
            TXB1SIDH = 0xE0;
            TXB1DLC = 0x08;
            TXB1D0 = Tx_data_8bytes_Buffer_1[0];
            TXB1D1 = Tx_data_8bytes_Buffer_1[1];
            TXB1D2 = Tx_data_8bytes_Buffer_1[2];
            TXB1D3 = Tx_data_8bytes_Buffer_1[3];
            TXB1D4 = Tx_data_8bytes_Buffer_1[4];
            TXB1D5 = Tx_data_8bytes_Buffer_1[5];
            TXB1D6 = Tx_data_8bytes_Buffer_1[6];
            TXB1D7 = Tx_data_8bytes_Buffer_1[7];
             //enable the TXBnCON  such that the transmitter buffer and assign the highest priority to the chosen buffer.
            TXB1CON = TransmitAtHighPriority;
            break;
           
            // else if(Transfer_buffer == 2)//010 = Transmit Buffer 2
        case 2:
            CANCON = CANCON_TransmitBuffer_2;            
            TXB2SIDL = 0x00;//for LSB 3 bits
            TXB2SIDH = 0x01;//for MSB 8 bits
            TXB2DLC = 0x08;
            TXB2D0 = Tx_data_8bytes_Buffer_2[0];
            TXB2D1 = Tx_data_8bytes_Buffer_2[1];
            TXB2D2 = Tx_data_8bytes_Buffer_2[2];
            TXB2D3 = Tx_data_8bytes_Buffer_2[3];
            TXB2D4 = Tx_data_8bytes_Buffer_2[4];
            TXB2D5 = Tx_data_8bytes_Buffer_2[5];
            TXB2D6 = Tx_data_8bytes_Buffer_2[6];
            TXB2D7 = Tx_data_8bytes_Buffer_2[7];
            
            //enable the TXBnCON  such that the transmitter buffer and assign the highest priority to the chosen buffer.
            TXB2CON = TransmitAtHighPriority;
        default://No code line statement
            ;
    }//switch ends  
    CANCON=NormalMode_0x00;
}*/

void CAN_Read_fun()
{
    
Rx_data_11bytes_Buffer_0[8] =  RXB0SIDL;//LowByte_3bits
    Rx_data_11bytes_Buffer_0[9] =  RXB0SIDH ;//HigherByte_8bits
   // Rx_data_11bytes_Buffer_0[10] =  RXB0DLC;//DLC 
    if((Rx_data_11bytes_Buffer_0[8]==0x20) && (Rx_data_11bytes_Buffer_0[9]==0xE0) )  //passing a message ID 701.
    {
    CANCON=0x0C;//Select Normal Mode and Select Receive Buffer_0.   
    Rx_data_11bytes_Buffer_0[0] =  RXB0D0;//data_byte_0
    Rx_data_11bytes_Buffer_0[1] =  RXB0D1;//data_byte_1
    Rx_data_11bytes_Buffer_0[2] =  RXB0D2;//data_byte_2
    Rx_data_11bytes_Buffer_0[3] =  RXB0D3;//data_byte_3
    Rx_data_11bytes_Buffer_0[4] =  RXB0D4;//data_byte_4
    Rx_data_11bytes_Buffer_0[5] =  RXB0D5;//data_byte_5
    Rx_data_11bytes_Buffer_0[6] =  RXB0D6;//data_byte_6
    Rx_data_11bytes_Buffer_0[7] =  RXB0D7;//data_byte_7 
    //Rx_data_11bytes_Buffer_0[8] =  RXB0SIDL;//LowByte_3bits
    //Rx_data_11bytes_Buffer_0[9] =  RXB0SIDH ;//HigherByte_8bits
    Rx_data_11bytes_Buffer_0[10] =  RXB0DLC;//DLC 
   // if((Rx_data_11bytes_Buffer_0[8]==0x20) && (Rx_data_11bytes_Buffer_0[9]==0xE0) )
  
    }
    
    RXB0CONbits.RXB0FUL = 0;
    CANCON=NormalMode_0x00;//Resetting the Receiver Buffer_0 000 and set mode to Normal Mode  to get next data
}

__interrupt () ISR1()
{
     
       CAN_Read_fun(); //calling read function.
   // CANCON=NormalMode_0x00;
    if(RXB0IF)
    {
        RXB0IF=0;//Clear The Interrupt enable flag
        //CAN_Read_fun();//CAN Rx is called
        /*LED Blink for Notification of Interrupt LED 1*/
       
    }
}
can_read()
{
PORTCbits.RC2=0;
PORTCbits.RC1=0;
   while(1)
    {
    if (sw2 == 0) //Front Wiper is OFF, that means i will ignore the rain condition
    {
       
          
       
       
       //PORTCbits.RC2=0;
       if( Rx_data_11bytes_Buffer_0[5] == 0x00)  //front wiper is ON, no rain
            {
           PORTCbits.RC2=1;
           __delay_ms(1000);  //1 sec delay.
               PORTCbits.RC2=0;
               __delay_ms(1000);  //1 sec delay.
               
               
                  Tx_Buffer(0,0x00,0x00,0x00);  // calling a transmission data         
                         
               
               
               
               
           }
       if( Rx_data_11bytes_Buffer_0[5] == 0x01)//front wiper is ON, normal rain
       {
                PORTCbits.RC2=1;
                __delay_ms(5000);  //5 sec delay.
                PORTCbits.RC2=0;
                __delay_ms(5000);  //5 sec delay.
             
            }
       if( Rx_data_11bytes_Buffer_0[5] == 0x10)//front wiper is ON, heavy rain
            {
                PORTCbits.RC2=1;
                __delay_ms(3000);  //3 sec delay.
                PORTCbits.RC2=0;
                __delay_ms(3000);  //3 sec delay.
                
                Tx_Buffer(0,0x10,0x10,0x10); // calling a transmission data
                              
               
               
                
            }
       if( Rx_data_11bytes_Buffer_0[5] == 0x11)//fault condition.
            {
                PORTCbits.RC2=1; 
                __delay_ms(8000);    //8 sec delay.
                PORTCbits.RC2=0;
                __delay_ms(8000);    //8 sec delay.
            
                Tx_Buffer(0,0x11,0x11,0x11);  // calling a transmission data
               
               
            
       }
  
   
    
       //RA0 =0;
        if (sw3 == 0) //Rear Wiper is OFF, that means i will ignore the rain condition
    {
       
       
       
       
       //PORTCbits.RC2=0;
       if( Rx_data_11bytes_Buffer_0[5] == 0x00)//Rear wiper is ON,no rain
            {
           PORTCbits.RC1=1;
           __delay_ms(1000);   //1 sec delay.
               PORTCbits.RC1=0;
               __delay_ms(1000);  //1 sec delay.
               
               
                  Tx_Buffer(0,0x00,0x00,0x00);  // calling a transmission data
             
                             
               
               
               
               
            }
       if( Rx_data_11bytes_Buffer_0[5] == 0x01)//Rear wiper is ON,normal rain
         {
                PORTCbits.RC1=1;
                __delay_ms(5000);  //5 sec delay.
                PORTCbits.RC1=0;
                __delay_ms(5000);  //5 sec delay.
             
            }
       if( Rx_data_11bytes_Buffer_0[5] == 0x10)//Rear wiper is ON, heavy rain
            {
                PORTCbits.RC1=1;
                __delay_ms(3000);  //3 sec delay.
                PORTCbits.RC1=0;
                __delay_ms(3000);  //3 sec delay.
                
                Tx_Buffer(0,0x10,0x10,0x10);  // calling a transmission data
                              
               
               
                
            }
       if( Rx_data_11bytes_Buffer_0[5] == 0x11)//fault condition
            {
                PORTCbits.RC1=1;
                __delay_ms(8000);  //8 sec delay.
                PORTCbits.RC1=0;
                __delay_ms(8000);   //8 sec delay.
            
                Tx_Buffer(0,0x11,0x11,0x11);  // calling a transmission data
             }            
            
       
   
        }
   }
}
}



   
void main(void) {
    
    TRISC=0x00;//Set LED_1 & LED_2 as an Output
    TRISB=0x03;
    RBPU=0;
    Sys_Init();
    Can_Init();
    CANCON_Set_Mode(0);//Set Configuration Mode  the CANCON Register 
    Set_Mask();
    Set_Filter();
    Set_BaudRate();
    CANCON_Set_Mode(4);//Set Normal Mode
    can_read();
    
 
}
